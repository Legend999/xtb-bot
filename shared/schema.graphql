type Query {
    loggedIn: Boolean!
    accountList: [Account!]!
    stocksInStrategies: [StockInStrategyD!]!
}
type Mutation {
    logIn(email: String!, password: String!): Boolean!
    addStockToWatchList(fullTicker: String!): Boolean!
    removeStockFromWatchList(fullTicker: String!): Boolean!
    addStockToStrategyD(fullTicker: String!, percent: Float!, pricePerLevel: Float!): Boolean!
}
type Subscription {
    stocksPriceChange: StocksPriceChangeResult!
}
union StocksPriceChangeResult = StockPriceChangeData | StockPriceChangeError
type StockPriceChangeData {
    stocks: [StockWithPrice!]!
}
type StockPriceChangeError {
    errorMessage: String!
}
type StockWithPrice {
    fullTicker: String!
    price: StockPrice!
}
type StockPrice {
    ask: Float!
    bid: Float!
}
type Account {
    type: AccountType!
    number: String!
    currency: AccountCurrency!
}
enum AccountType {
    REAL
    DEMO
}
enum AccountCurrency {
    USD
    EUR
    PLN
}
type StockInStrategyD {
    fullTicker: String!
    percent: Float!
    pricePerLevel: Float!
}
